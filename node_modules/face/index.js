var router  = require("router"),
	restify = require("restify"),
	cv      = require("opencv"),
	fs      = require("fs"),
	url     = require("url");

var routes,
	opt = {
		prefix: '',
	};

module.exports.init = function(opt) {
	routes = router();
	global.opt = opt || global.opt;	
	
	var prefix = global.opt.prefix || '';

	// Face recognize service
	routes.post(prefix + '/recognize', function(req, res, next) {
		var tmp = req.files.file.path;
		
		cv.readImage(tmp, function(err, im) {
			im.detectObject(cv.FACE_CASCADE, {}, function(err, faces) {
				for(var i = 0; i < faces.length; ++i) {
					var face = faces[i];
					im.ellipse(face.x + face.width/2, face.y + face.height/2, face.width/2, face.height/2);
				};
				res.writeHeader(200, {'Content-Type': 'image/jpeg'});
				res.end(im.toBuffer());
			});
		});
	});

	// Render(Mark) faces on image
	// TODO 現在還沒使用
	routes.post(prefix + "/steps/render", function(req, res, next) {
		var tmp   = req.files.file.path,
		    faces = req.body.faces,
			scale = req.body.scale || 1;

		cv.readImage(tmp, function(err, im) {
			for(var i = 0; i < faces.length; ++i) {
				var face = faces[i];
				im.ellipse((face.x + face.width / 2) * scale, (face.y + face.height / 2) * scale, face.width / 2 * scale, face.height / 2 * scale);
			};
			res.writeHeader(200, {'Content-Type': 'image/jpeg'});
			res.end(im.toBuffer());
		});
	});

	// Detect faces and return JSON data of faces
	routes.post(prefix + "/steps/detect", function(req, res, next) {
		var a = (new Date()).getTime();
		var tmp = req.files.file.path;
		var query = url.parse(req.url, true);

		cv.readImage(tmp, function(err, im) {
			var opts = {
				scale: 1.1,
				neighbors: 3,
				min: [0, 0]
			}

			// Options
			// opts.scale, opts.neighbors, opts.min && opts.min[0], opts.min && opts.min[1]
			im.detectObject(cv.FACE_CASCADE, opts, function(err, faces) {
				res.send(faces);
				console.log("time: " + ((new Date()).getTime() - a));
			});
		});
	});

	// Pre-process of image 
	routes.post(prefix + "/steps/preprocess", function(req, res, next) {
		var a = (new Date()).getTime();
		var tmp = req.files.file.path;
		cv.readImage(tmp, function(err, im) {
			im.convertGrayscale();
			res.writeHeader(200, {"Content-Type": "image/jpeg", "Content-Disposition:": "attachment; filename=" + req.files.file.name});
			res.end(im.toBuffer());
			console.log("time: " + ((new Date()).getTime() - a));
		});
	});

	// Error handling

	function error(req, res, next) {
		next(new restify.ResourceNotFoundError());
	}

	routes.get(error)
		  .head(error)
		  .post(error)
		  .put(error)
		  .del(error);
}

// -- Routing 
// -----------------------------------------------------
// Module enter point
// -----------------------------------------------------

module.exports.route = function(req, res, next) {
	routes(req, res, function(err) {
		if( ! next) {
			return;
		}

		if(err) { 
			next(err); 
		} else { 
			next(new restify.MethodNotAllowedError()); 
		}
	});                                                    
}

/**/
